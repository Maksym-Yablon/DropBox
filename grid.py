import pygame
import random
from constants import *


class Grid:
    """–ö–ª–∞—Å –¥–ª—è —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è —ñ–≥—Ä–æ–≤–æ—é —Å—ñ—Ç–∫–æ—é 8x8"""
    
    def __init__(self, size=8, generate_initial=True):
        self.size = size
        self.cells = [[None for _ in range(size)] for _ in range(size)]  # –Ü–≥—Ä–æ–≤–∞ —Å—ñ—Ç–∫–∞
        self.score = 0  # –ü–æ—Ç–æ—á–Ω–∏–π —Ä–∞—Ö—É–Ω–æ–∫
        self.combo_multiplier = 1  # –ú–Ω–æ–∂–Ω–∏–∫ –∫–æ–º–±–æ
        self.last_clear_success = False
        
        # –ì–µ–Ω–µ—Ä—É—î–º–æ –ø–æ—á–∞—Ç–∫–æ–≤—ñ —Ñ—ñ–≥—É—Ä–∏, —è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ
        if generate_initial:
            self.generate_simple_initial_setup()

    def generate_simple_initial_setup(self):
        """–ü—Ä–æ—Å—Ç–∞ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—è –ø–æ—á–∞—Ç–∫–æ–≤–∏—Ö —Ñ—ñ–≥—É—Ä –Ω–∞ —Å—ñ—Ç—Ü—ñ"""
        from piece import generate_random_piece
        
        # –í–∏–ø–∞–¥–∫–æ–≤–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Ñ—ñ–≥—É—Ä –≤—ñ–¥ 2 –¥–æ 6
        num_pieces = random.randint(2, 6)
        placed_pieces = 0
        max_attempts = 30  # –ú–∞–∫—Å–∏–º—É–º —Å–ø—Ä–æ–±
        
        print(f"üé≤ –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è {num_pieces} –ø–æ—á–∞—Ç–∫–æ–≤–∏—Ö —Ñ—ñ–≥—É—Ä...")
        
        for attempt in range(max_attempts):
            if placed_pieces >= num_pieces:
                break
                
            # –ì–µ–Ω–µ—Ä—É—î–º–æ –≤–∏–ø–∞–¥–∫–æ–≤—É —Ñ—ñ–≥—É—Ä—É
            piece = generate_random_piece()
            
            # –í–∏–ø–∞–¥–∫–æ–≤–∞ –ø–æ–∑–∏—Ü—ñ—è –Ω–∞ —Å—ñ—Ç—Ü—ñ
            grid_x = random.randint(0, self.size - 3)  # –ó–∞–ª–∏—à–∞—î–º–æ –º—ñ—Å—Ü–µ –¥–ª—è —Ñ—ñ–≥—É—Ä–∏
            grid_y = random.randint(0, self.size - 3)
            
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –º–æ–∂–Ω–∞ —Ä–æ–∑–º—ñ—Å—Ç–∏—Ç–∏ —Ñ—ñ–≥—É—Ä—É
            if self.can_place_piece(piece, grid_x, grid_y):
                # –†–æ–∑–º—ñ—â—É—î–º–æ —Ñ—ñ–≥—É—Ä—É
                for row in range(len(piece.shape)):
                    for col in range(len(piece.shape[row])):
                        if piece.shape[row][col] == 1:
                            target_row = grid_y + row
                            target_col = grid_x + col
                            if (0 <= target_row < self.size and 0 <= target_col < self.size):
                                self.cells[target_row][target_col] = piece.color
                
                placed_pieces += 1
                print(f"  ‚úì –§—ñ–≥—É—Ä–∞ {placed_pieces}/{num_pieces} —Ä–æ–∑–º—ñ—â–µ–Ω–∞ –≤ –ø–æ–∑–∏—Ü—ñ—ó ({grid_x}, {grid_y})")
        
        if placed_pieces < num_pieces:
            print(f"  ‚ö†Ô∏è –†–æ–∑–º—ñ—â–µ–Ω–æ {placed_pieces} –∑ {num_pieces} —Ñ—ñ–≥—É—Ä")
        else:
            print(f"  üéâ –£—Å–ø—ñ—à–Ω–æ —Ä–æ–∑–º—ñ—â–µ–Ω–æ –≤—Å—ñ {num_pieces} —Ñ—ñ–≥—É—Ä–∏!")
        
        # –°–∫–∏–¥–∞—î–º–æ –æ—á–∫–∏ –ø—ñ—Å–ª—è –ø–æ—á–∞—Ç–∫–æ–≤–æ–≥–æ —Ä–æ–∑–º—ñ—â–µ–Ω–Ω—è
        self.score = 0

    def draw(self, surface, cell_size=GRID_CELL_SIZE):
        """–ú–∞–ª—é—î —ñ–≥—Ä–æ–≤—É —Å—ñ—Ç–∫—É –Ω–∞ –µ–∫—Ä–∞–Ω—ñ"""
        offset_x = (SCREEN_WIDTH - self.size * cell_size) // 2
        offset_y = (SCREEN_HEIGHT - self.size * cell_size) // 2
        
        # –ú–∞–ª—é—î–º–æ —Å—ñ—Ç–∫—É
        for row in range(self.size):
            for col in range(self.size):
                rect = pygame.Rect(
                    offset_x + col * cell_size,
                    offset_y + row * cell_size,
                    cell_size, cell_size
                )
                
                if self.cells[row][col] is None:
                    color = EMPTY_CELL_COLOR  # –ü–æ—Ä–æ–∂–Ω—è –∫–ª—ñ—Ç–∏–Ω–∫–∞
                else:
                    color = self.cells[row][col]  # –ö–æ–ª—ñ—Ä —Ñ—ñ–≥—É—Ä–∏
                    
                pygame.draw.rect(surface, color, rect)
                pygame.draw.rect(surface, GRID_LINE_COLOR, rect, 1)  # –†–∞–º–∫–∞

    def is_row_full(self, row):
        """–ü–µ—Ä–µ–≤—ñ—Ä—è—î, —á–∏ —Ä—è–¥–æ–∫ –∑–∞–ø–æ–≤–Ω–µ–Ω–∏–π"""
        return all(self.cells[row][col] is not None for col in range(self.size))

    def is_col_full(self, col):
        """–ü–µ—Ä–µ–≤—ñ—Ä—è—î, —á–∏ —Å—Ç–æ–≤–ø–µ—Ü—å –∑–∞–ø–æ–≤–Ω–µ–Ω–∏–π"""
        return all(self.cells[row][col] is not None for row in range(self.size))

    def clear_full_rows(self):
        """–û—á–∏—â–∞—î –∑–∞–ø–æ–≤–Ω–µ–Ω—ñ —Ä—è–¥–∫–∏"""
        cleared = 0
        for row in range(self.size):
            if self.is_row_full(row):
                for col in range(self.size):
                    self.cells[row][col] = None  # –û—á–∏—â–∞—î–º–æ –∫–ª—ñ—Ç–∏–Ω–∫–∏ –¥–æ None
                cleared += 1
        return cleared
    
    def clear_full_cols(self):
        # –æ—á–∏—â–∞—î–º–æ –∑–∞–ø–æ–≤–Ω–µ–Ω—ñ —Å—Ç–æ–≤–ø—Ü—ñ
        cleared = 0
        for col in range(self.size):
            if self.is_col_full(col):
                for row in range(self.size):
                    self.cells[row][col] = None  # –æ—á–∏—â–∞—î–º–æ –∫–ª—ñ—Ç–∏–Ω–∫–∏ –¥–æ None
                cleared += 1
        return cleared
    
    # –ì–û–õ–û–í–ù–ê –§–£–ù–ö–¶–Ü–Ø –û–ß–ò–©–ï–ù–ù–Ø
    def clear_lines(self):
        """–û—á–∏—â–∞—î –≤—Å—ñ –ø–æ–≤–Ω—ñ –ª—ñ–Ω—ñ—ó (—Ä—è–¥–∫–∏ + —Å—Ç–æ–≤–ø—Ü—ñ) —ñ –Ω–∞—Ä–∞—Ö–æ–≤—É—î –±–∞–ª–∏"""
        # –°–ø–æ—á–∞—Ç–∫—É –∑–Ω–∞—Ö–æ–¥–∏–º–æ –≤—Å—ñ –ø–æ–≤–Ω—ñ —Ä—è–¥–∫–∏ —Ç–∞ —Å—Ç–æ–≤–ø—Ü—ñ
        full_rows = []
        full_cols = []
        
        # –ó–Ω–∞—Ö–æ–¥–∏–º–æ –≤—Å—ñ –ø–æ–≤–Ω—ñ —Ä—è–¥–∫–∏
        for row in range(self.size):
            if self.is_row_full(row):
                full_rows.append(row)
        
        # –ó–Ω–∞—Ö–æ–¥–∏–º–æ –≤—Å—ñ –ø–æ–≤–Ω—ñ —Å—Ç–æ–≤–ø—Ü—ñ
        for col in range(self.size):
            if self.is_col_full(col):
                full_cols.append(col)
        
        # –û—á–∏—â–∞—î–º–æ –≤—Å—ñ –∑–Ω–∞–π–¥–µ–Ω—ñ —Ä—è–¥–∫–∏ —Ç–∞ —Å—Ç–æ–≤–ø—Ü—ñ –æ–¥–Ω–æ—á–∞—Å–Ω–æ
        for row in full_rows:
            for col in range(self.size):
                self.cells[row][col] = None
        
        for col in full_cols:
            for row in range(self.size):
                self.cells[row][col] = None
        
        total_cleared = len(full_rows) + len(full_cols)
        points = total_cleared * 10

        # –ë–æ–Ω—É—Å–∏ –∑–∞ –∫—ñ–ª—å–∫–∞ –ª—ñ–Ω—ñ–π –æ–¥–Ω–æ—á–∞—Å–Ω–æ
        bonus = 0
        if total_cleared >= 2:
            if total_cleared == 2:
                bonus = 10
            elif total_cleared == 3:
                bonus = 20
            else:
                bonus = 30

        # --- –ö–æ–º–±–æ-–º–Ω–æ–∂–Ω–∏–∫ ---
        if total_cleared > 0:
            if self.last_clear_success:
                self.combo_multiplier += 1  # –ó–±—ñ–ª—å—à—É—î–º–æ –º–Ω–æ–∂–Ω–∏–∫
            else:
                self.combo_multiplier = 1  # –°–∫–∏–¥–∞—î–º–æ –º–Ω–æ–∂–Ω–∏–∫
            self.last_clear_success = True
        else:
            self.combo_multiplier = 1
            self.last_clear_success = False

        self.score += (points + bonus) * self.combo_multiplier

        if total_cleared > 0:
            # –ü–æ–∫–∞–∑—É—î–º–æ —Ç—ñ–ª—å–∫–∏ –≤–∞–∂–ª–∏–≤—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –æ—á–∫–∏ —Ç–∞ –∫–æ–º–±–æ
            if len(full_rows) > 0 and len(full_cols) > 0:
                print(f"üéØ –û—á–∏—â–µ–Ω–æ {len(full_rows)} —Ä—è–¥–∫—ñ–≤ + {len(full_cols)} —Å—Ç–æ–≤–ø—Ü—ñ–≤! +{(points + bonus) * self.combo_multiplier} –æ—á–æ–∫")
            elif len(full_rows) > 0:
                print(f"üéØ –û—á–∏—â–µ–Ω–æ {len(full_rows)} —Ä—è–¥–∫—ñ–≤! +{(points + bonus) * self.combo_multiplier} –æ—á–æ–∫")
            elif len(full_cols) > 0:
                print(f"üéØ –û—á–∏—â–µ–Ω–æ {len(full_cols)} —Å—Ç–æ–≤–ø—Ü—ñ–≤! +{(points + bonus) * self.combo_multiplier} –æ—á–æ–∫")
            
            if bonus > 0:
                print(f"üéÅ –ë–æ–Ω—É—Å –∑–∞ –∫—ñ–ª—å–∫–∞ –ª—ñ–Ω—ñ–π: +{bonus}")
            if self.combo_multiplier > 1:
                print(f"üî• –ö–û–ú–ë–û x{self.combo_multiplier}!")
        
        return total_cleared
    
        # –¢–ï–°–¢–û–í–ê –§–£–ù–ö–¶–Ü–Ø (–¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏)
    def fill_test_line(self):
        """–ó–∞–ø–æ–≤–Ω—é—î –ø–µ—Ä—à–∏–π —Ä—è–¥–æ–∫ –¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è"""
        for col in range(self.size):
            self.cells[0][col] = PIECE_RED  # –ß–µ—Ä–≤–æ–Ω–∏–π –∫–æ–ª—ñ—Ä –¥–ª—è —Ç–µ—Å—Ç—É
            
    # –í–ê–õ–Ü–î–ê–¶–Ü–Ø –†–û–ó–ú–Ü–©–ï–ù–ù–Ø –§–Ü–ì–£–†
    def mouse_to_grid(self, mouse_x, mouse_y, cell_size=GRID_CELL_SIZE):
        """–ö–æ–Ω–≤–µ—Ä—Ç—É—î –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏ –º–∏—à—ñ —É –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏ —Å—ñ—Ç–∫–∏"""
        offset_x = (SCREEN_WIDTH - self.size * cell_size) // 2
        offset_y = (SCREEN_HEIGHT - self.size * cell_size) // 2
        
        grid_x = (mouse_x - offset_x) // cell_size
        grid_y = (mouse_y - offset_y) // cell_size
        
        return grid_x, grid_y
    
    def can_place_piece(self, piece, grid_x, grid_y):
        """–ü–µ—Ä–µ–≤—ñ—Ä—è—î, —á–∏ –º–æ–∂–Ω–∞ —Ä–æ–∑–º—ñ—Å—Ç–∏—Ç–∏ —Ñ—ñ–≥—É—Ä—É –Ω–∞ –ø–æ–∑–∏—Ü—ñ—ó (grid_x, grid_y)"""
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∫–æ–∂–Ω—É –∫–ª—ñ—Ç–∏–Ω–∫—É —Ñ—ñ–≥—É—Ä–∏
        for row in range(len(piece.shape)):
            for col in range(len(piece.shape[row])):
                if piece.shape[row][col] == 1:  # –Ø–∫—â–æ —î –±–ª–æ–∫ —É —Ñ—ñ–≥—É—Ä—ñ
                    # –†–æ–∑—Ä–∞—Ö–æ–≤—É—î–º–æ –ø–æ–∑–∏—Ü—ñ—é –Ω–∞ —Å—ñ—Ç—Ü—ñ
                    target_row = grid_y + row
                    target_col = grid_x + col
                    
                    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –º–µ–∂—ñ —Å—ñ—Ç–∫–∏
                    if (target_row < 0 or target_row >= self.size or 
                        target_col < 0 or target_col >= self.size):
                        return False
                    
                    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –∫–ª—ñ—Ç–∏–Ω–∫–∞ –≤—ñ–ª—å–Ω–∞
                    if self.cells[target_row][target_col] is not None:
                        return False
        
        return True
    
    def place_piece(self, piece, grid_x, grid_y):
        """–†–æ–∑–º—ñ—â—É—î —Ñ—ñ–≥—É—Ä—É –Ω–∞ —Å—ñ—Ç—Ü—ñ"""
        if not self.can_place_piece(piece, grid_x, grid_y):
            return False
        
        # –†–æ–∑–º—ñ—â—É—î–º–æ —Ñ—ñ–≥—É—Ä—É
        for row in range(len(piece.shape)):
            for col in range(len(piece.shape[row])):
                if piece.shape[row][col] == 1:
                    target_row = grid_y + row
                    target_col = grid_x + col
                    self.cells[target_row][target_col] = piece.color  # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –∫–æ–ª—ñ—Ä —Ñ—ñ–≥—É—Ä–∏
        
        self.score += 1
        return True
    
    def highlight_position(self, surface, grid_x, grid_y, piece, cell_size=GRID_CELL_SIZE, valid=True):
        """–ü—ñ–¥—Å–≤—ñ—á—É—î –ø–æ–∑–∏—Ü—ñ—é –¥–ª—è —Ä–æ–∑–º—ñ—â–µ–Ω–Ω—è —Ñ—ñ–≥—É—Ä–∏"""
        offset_x = (SCREEN_WIDTH - self.size * cell_size) // 2
        offset_y = (SCREEN_HEIGHT - self.size * cell_size) // 2
        
        # –ö–æ–ª—ñ—Ä –ø—ñ–¥—Å–≤—ñ—á—É–≤–∞–Ω–Ω—è
        color = PREVIEW_VALID_COLOR if valid else PREVIEW_INVALID_COLOR  # –ó–µ–ª–µ–Ω–∏–π –∞–±–æ —á–µ—Ä–≤–æ–Ω–∏–π
        
        # –°—Ç–≤–æ—Ä—é—î–º–æ –ø–æ–≤–µ—Ä—Ö–Ω—é –∑ –ø—Ä–æ–∑–æ—Ä—ñ—Å—Ç—é
        highlight_surface = pygame.Surface((cell_size, cell_size), pygame.SRCALPHA)
        
        for row in range(len(piece.shape)):
            for col in range(len(piece.shape[row])):
                if piece.shape[row][col] == 1:
                    target_row = grid_y + row
                    target_col = grid_x + col
                    
                    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –≤ –º–µ–∂–∞—Ö –µ–∫—Ä–∞–Ω—É
                    if (0 <= target_row < self.size and 0 <= target_col < self.size):
                        rect = pygame.Rect(
                            offset_x + target_col * cell_size,
                            offset_y + target_row * cell_size,
                            cell_size, cell_size
                        )
                        # –ú–∞–ª—é—î–º–æ –ø—ñ–¥—Å–≤—ñ—á—É–≤–∞–Ω–Ω—è
                        pygame.draw.rect(highlight_surface, color, (0, 0, cell_size, cell_size))
                        surface.blit(highlight_surface, rect.topleft)
    
    def print_grid_state(self, title="–°—Ç–∞–Ω —Å—ñ—Ç–∫–∏"):
        """–î—Ä—É–∫—É—î –ø–æ—Ç–æ—á–Ω–∏–π —Å—Ç–∞–Ω —Å—ñ—Ç–∫–∏ –¥–ª—è –Ω–∞–ª–∞–≥–æ–¥–∂–µ–Ω–Ω—è"""
        print(f"=== {title} ===")
        for row in range(self.size):
            row_str = ""
            for col in range(self.size):
                if self.cells[row][col] is None:
                    row_str += "‚¨ú "
                else:
                    row_str += "üü© "
            print(f"–†—è–¥–æ–∫ {row}: {row_str}")
        print()
    
    def test_clearing_logic(self):
        """–¢–µ—Å—Ç—É—î –ª–æ–≥—ñ–∫—É –æ—á–∏—â–µ–Ω–Ω—è –ª—ñ–Ω—ñ–π"""
        print("=== –¢–ï–°–¢ –õ–û–ì–Ü–ö–ò –û–ß–ò–©–ï–ù–ù–Ø ===")
        
        # –û—á–∏—â–∞—î–º–æ —Å—ñ—Ç–∫—É
        for row in range(self.size):
            for col in range(self.size):
                self.cells[row][col] = None
        
        # –°—Ç–≤–æ—Ä—é—î–º–æ —Ç–µ—Å—Ç–æ–≤–∏–π —Å—Ü–µ–Ω–∞—Ä—ñ–π: –∑–∞–ø–æ–≤–Ω—é—î–º–æ —Å—Ç–æ–≤–ø–µ—Ü—å 0, –∞–ª–µ –∑–∞–ª–∏—à–∞—î–º–æ –æ–¥–Ω—É –ø–æ—Ä–æ–∂–Ω—é –∫–ª—ñ—Ç–∏–Ω–∫—É
        for row in range(self.size):
            if row != 3:  # –ó–∞–ª–∏—à–∞—î–º–æ —Ä—è–¥–æ–∫ 3 –ø–æ—Ä–æ–∂–Ω—ñ–º
                self.cells[row][0] = PIECE_RED  # –ß–µ—Ä–≤–æ–Ω–∏–π –∫–æ–ª—ñ—Ä
        
        # –ó–∞–ø–æ–≤–Ω—é—î–º–æ —Å—Ç–æ–≤–ø–µ—Ü—å 1 –ø–æ–≤–Ω—ñ—Å—Ç—é
        for row in range(self.size):
            self.cells[row][1] = PIECE_GREEN  # –ó–µ–ª–µ–Ω–∏–π –∫–æ–ª—ñ—Ä
        
        print("–°—Ç–≤–æ—Ä–µ–Ω–∏–π —Ç–µ—Å—Ç–æ–≤–∏–π —Å—Ü–µ–Ω–∞—Ä—ñ–π:")
        print("–°—Ç–æ–≤–ø–µ—Ü—å 0: –∑ –æ–¥–Ω–æ—é –ø–æ—Ä–æ–∂–Ω—å–æ—é –∫–ª—ñ—Ç–∏–Ω–∫–æ—é –≤ —Ä—è–¥–∫—É 3")
        print("–°—Ç–æ–≤–ø–µ—Ü—å 1: –ø–æ–≤–Ω—ñ—Å—Ç—é –∑–∞–ø–æ–≤–Ω–µ–Ω–∏–π")
        
        self.print_grid_state("–¢–µ—Å—Ç–æ–≤–∏–π —Å—Ç–∞–Ω")
        
        # –¢–µ—Å—Ç—É—î–º–æ –ø–µ—Ä–µ–≤—ñ—Ä–∫—É —Å—Ç–æ–≤–ø—Ü—ñ–≤
        print("–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å—Ç–æ–≤–ø—Ü—ñ–≤:")
        for col in range(2):
            is_full = self.is_col_full(col)
            print(f"–°—Ç–æ–≤–ø–µ—Ü—å {col}: {'–ü–û–í–ù–ò–ô' if is_full else '–ù–ï –ü–û–í–ù–ò–ô'}")
        
        # –û—á–∏—â–∞—î–º–æ –ª—ñ–Ω—ñ—ó
        self.clear_lines()