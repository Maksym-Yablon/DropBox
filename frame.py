import pygame
from constants import *

class FrameManager:
    """–ö–ª–∞—Å –¥–ª—è —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è —Ä–∞–º–∫–∞–º–∏ —ñ–≥—Ä–æ–≤–æ–≥–æ –ø–æ–ª—è –∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ –æ—á–∫—ñ–≤ –≥—Ä–∞–≤—Ü—è"""
    
    def __init__(self):
        self.current_frame = None
        self.frame_levels = {
            0: "assets/sprites/ui/frame_wood.png",      # –î–µ—Ä–µ–≤'—è–Ω–∞ —Ä–∞–º–∫–∞ (–ø–æ—á–∞—Ç–∫–æ–≤–∞)
            1000: "assets/sprites/ui/frame_wood.png",   # –¢–∏–º—á–∞—Å–æ–≤–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —Ç—É –∂ —Ä–∞–º–∫—É –¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è
            # –í –º–∞–π–±—É—Ç–Ω—å–æ–º—É –º–æ–∂–Ω–∞ –¥–æ–¥–∞—Ç–∏ –±—ñ–ª—å—à–µ —Ä—ñ–≤–Ω—ñ–≤:
            # 5000: "assets/sprites/ui/frame_silver.png", # –°—Ä—ñ–±–Ω–∞ —Ä–∞–º–∫–∞ (5000+ –æ—á–∫—ñ–≤)
            # 10000: "assets/sprites/ui/frame_gold.png",  # –ó–æ–ª–æ—Ç–∞ —Ä–∞–º–∫–∞ (10000+ –æ—á–∫—ñ–≤)
        }
        self.loaded_frames = {}
        self.current_score = 0
        
        # –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –≤—Å—ñ –¥–æ—Å—Ç—É–ø–Ω—ñ —Ä–∞–º–∫–∏
        self._load_frames()
        
        # –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –ø–æ—á–∞—Ç–∫–æ–≤—É —Ä–∞–º–∫—É
        self.update_frame(0)
    
    def _load_frames(self):
        """–ó–∞–≤–∞–Ω—Ç–∞–∂—É—î –≤—Å—ñ —Ä–∞–º–∫–∏ –∑ —Ñ–∞–π–ª—ñ–≤"""
        for score_threshold, frame_path in self.frame_levels.items():
            try:
                frame_image = pygame.image.load(frame_path)
                self.loaded_frames[score_threshold] = frame_image
                print(f"–†–∞–º–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–∞: {frame_path}")
            except pygame.error as e:
                print(f"–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ä–∞–º–∫–∏ {frame_path}: {e}")
                # –Ø–∫—â–æ —Ä–∞–º–∫–∞ –Ω–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–∏–ª–∞—Å—è, —Å—Ç–≤–æ—Ä—é—î–º–æ –∑–∞–≥–ª—É—à–∫—É
                if score_threshold == 0:  # –î–ª—è –ø–æ—á–∞—Ç–∫–æ–≤–æ—ó —Ä–∞–º–∫–∏ —Å—Ç–≤–æ—Ä—é—î–º–æ –ø—Ä–æ—Å—Ç—É –∑–∞–≥–ª—É—à–∫—É
                    placeholder = pygame.Surface((GRID_SIZE * GRID_CELL_SIZE + 40, GRID_SIZE * GRID_CELL_SIZE + 40), pygame.SRCALPHA)
                    pygame.draw.rect(placeholder, (139, 69, 19), placeholder.get_rect(), 5)
                    self.loaded_frames[score_threshold] = placeholder
    
    def get_frame_for_score(self, score):
        """–ü–æ–≤–µ—Ä—Ç–∞—î –Ω–∞–π–≤–∏—â–∏–π –¥–æ—Å—Ç—É–ø–Ω–∏–π —Ä—ñ–≤–µ–Ω—å —Ä–∞–º–∫–∏ –¥–ª—è –ø–æ—Ç–æ—á–Ω–æ–≥–æ —Ä–∞—Ö—É–Ω–∫—É"""
        best_threshold = 0
        for threshold in sorted(self.frame_levels.keys(), reverse=True):
            if score >= threshold and threshold in self.loaded_frames:
                best_threshold = threshold
                break
        return best_threshold
    
    def update_frame(self, score):
        """–û–Ω–æ–≤–ª—é—î —Ä–∞–º–∫—É –∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ —Ä–∞—Ö—É–Ω–∫—É"""
        new_frame_level = self.get_frame_for_score(score)
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –ø–æ—Ç—Ä—ñ–±–Ω–æ –∑–º—ñ–Ω—é–≤–∞—Ç–∏ —Ä–∞–º–∫—É
        if score != self.current_score:
            old_frame_level = self.get_frame_for_score(self.current_score)
            
            if new_frame_level != old_frame_level:
                self.current_frame = self.loaded_frames[new_frame_level]
                frame_name = self.frame_levels[new_frame_level].split('/')[-1]
                print(f"üéâ –°–Æ–†–ü–†–ò–ó! –†–∞–º–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–∞ –Ω–∞ {frame_name}! üéâ")
                return True  # –†–∞–º–∫–∞ –∑–º—ñ–Ω–∏–ª–∞—Å—è
            
            self.current_score = score
        
        # –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –ø–æ—Ç–æ—á–Ω—É —Ä–∞–º–∫—É, —è–∫—â–æ –≤–æ–Ω–∞ —â–µ –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞
        if self.current_frame is None:
            self.current_frame = self.loaded_frames[new_frame_level]
        
        return False  # –†–∞–º–∫–∞ –Ω–µ –∑–º—ñ–Ω–∏–ª–∞—Å—è
    
    def draw(self, screen):
        """–ú–∞–ª—é—î –ø–æ—Ç–æ—á–Ω—É —Ä–∞–º–∫—É –Ω–∞ –µ–∫—Ä–∞–Ω—ñ"""
        if self.current_frame is None:
            return
        
        # –†–æ–∑—Ä–∞—Ö–æ–≤—É—î–º–æ –ø–æ–∑–∏—Ü—ñ—é –¥–ª—è —Ü–µ–Ω—Ç—Ä—É–≤–∞–Ω–Ω—è —Ä–∞–º–∫–∏ –Ω–∞–¥ —Å—ñ—Ç–∫–æ—é
        frame_x = GRID_X - (self.current_frame.get_width() - (GRID_SIZE * GRID_CELL_SIZE)) // 2
        frame_y = GRID_Y - (self.current_frame.get_height() - (GRID_SIZE * GRID_CELL_SIZE)) // 1.4

        screen.blit(self.current_frame, (frame_x, frame_y))
    
    def get_current_frame_info(self):
        """–ü–æ–≤–µ—Ä—Ç–∞—î —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –ø–æ—Ç–æ—á–Ω—É —Ä–∞–º–∫—É"""
        current_level = self.get_frame_for_score(self.current_score)
        frame_name = self.frame_levels[current_level].split('/')[-1]
        
        # –ó–Ω–∞—Ö–æ–¥–∏–º–æ –Ω–∞—Å—Ç—É–ø–Ω–∏–π —Ä—ñ–≤–µ–Ω—å
        next_levels = [level for level in sorted(self.frame_levels.keys()) if level > current_level]
        next_level = next_levels[0] if next_levels else None
        
        return {
            'current_level': current_level,
            'current_name': frame_name,
            'next_level': next_level,
            'score': self.current_score
        }
    
    def get_next_frame_requirement(self):
        """–ü–æ–≤–µ—Ä—Ç–∞—î –æ—á–∫–∏, –Ω–µ–æ–±—Ö—ñ–¥–Ω—ñ –¥–ª—è –Ω–∞—Å—Ç—É–ø–Ω–æ—ó —Ä–∞–º–∫–∏"""
        current_level = self.get_frame_for_score(self.current_score)
        next_levels = [level for level in sorted(self.frame_levels.keys()) if level > current_level]
        
        if next_levels:
            return next_levels[0] - self.current_score
        return None  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞ —Ä–∞–º–∫–∞ –¥–æ—Å—è–≥–Ω—É—Ç–∞
